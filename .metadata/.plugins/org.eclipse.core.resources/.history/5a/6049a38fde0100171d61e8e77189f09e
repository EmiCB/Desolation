package com.emicb.desolation;

//TIP: Ctrl + Shift + O imports
//******************** Imports Things ********************
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import com.emicb.desolation.graphics.Screen;
import com.emicb.desolation.input.Keyboard;
import com.emicb.desolation.level.Level;
import com.emicb.desolation.level.RandomLevel;


public class Game extends Canvas implements Runnable {	
//******************** Sets Variables ********************
	// default Canvas serial
	private static final long serialVersionUID = 1L;
	
	// Sets game screen resolution
	public static int width = 400;
	public static int height = width / 16 * 9; // Sets resolution to a 16 * 9 ratio
	public static int scale = 3; // How much game will be scaled up to
	
	public static String title = "Desolation";
	
	// Sets more variables
	private Thread thread; // Thread: process within a process
	private JFrame frame; // something to do with graphics (fix comment later)
	private Keyboard key; // key inputs
	private Level level; // level
	private boolean running = false; // indicates if program is running

	private Screen screen;
	
	// main image object, our view
	private BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	private int[] pixels = ((DataBufferInt)image.getRaster().getDataBuffer()).getData(); //array of all pixels on screen, DataBufferInt: makes things integers, getRaster: gives rectangular array of pixels you can write to
	
//******************** Constructor ********************
	public Game() {
		// window display
		Dimension size = new Dimension(width * scale, height * scale);
		setPreferredSize(size); // applies window size
		
		screen = new Screen(width, height);
		frame = new JFrame();
		key = new Keyboard();
		level = new RandomLevel(64, 64);
		
		addKeyListener(key);
	}
	
//******************** Game Start ********************
	public synchronized void start() { // Synchronized: ensures there are no overlaps in instructions
		running = true;
		thread = new Thread(this, "Display");
		thread.start();
	}

//******************** Game Stop ********************
	public synchronized void stop () {
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
//******************** Game Loop ********************
	// Run method (executed in game start)
	public void run() {
		//******************** Sets More Variables ********************
		long lastTime = System.nanoTime(); // time when game opens
		long timer = System.currentTimeMillis();
				
		final double ns = 1000000000.0 / 60.0; 
		double delta = 0;
		
		int frames = 0; // measures frames
		int updates = 0; // measures how many times update(); is called every second
		
		requestFocus(); // you don't have to click the game to focus actions
		
		while (running) {
			//System.out.println("Running..."); // line to test run code
			
			long now = System.nanoTime(); // time when game runs
			delta += (now - lastTime) / ns;
			lastTime = now;
			
			// timer for updates (controls update speed for all players)
			while (delta >= 1) {
				update(); // handles logic
				updates++;
				delta--;
			}
			
			render(); // displays images
			frames++;
			
			// FPS timer
			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				
				System.out.println("UPS: " + updates + ", FPS: " + frames);
				frame.setTitle(title + "  |  " + "UPS: " + updates + ", FPS: " + frames);
				
				updates = 0;
				frames = 0;
			}
		}
		stop();
	}
	
	int x = 0, y = 0;
	
	//******************** Game Logic ********************
	public void update() {
		// Key Inputs
		key.update();
		
		// movement
		if (key.up)	y--;
		if (key.down) y++;
		if (key.left) x--;
		if (key.right) x++;
	}
	
	//******************** Game Images ********************
	public void render() {
		// buffer
		BufferStrategy bs = getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3); // stores 2 images in memory
			return;
		}
		
		screen.clear();
		level.render(x, y, screen);
		
		for (int i=0; i<pixels.length; i++) {
			pixels [i] = screen.pixels[i];
		}
		
		Graphics g = bs.getDrawGraphics(); // links drawing graphics and the buffer
		//******************** \/ Put All Graphics Below \/ ********************
		
		//g.setColor(Color.BLACK); // sets color to black
		//g.fillRect(0, 0, getWidth(), getHeight()); // makes background set color
		
		g.drawImage(image, 0, 0, getWidth(), getHeight(), null); // displays buffered image
		
		//******************** Stop ********************
		g.dispose(); // disposes of current graphics
		bs.show(); // shows buffer strategy
	}
	
	//******************** Entry Of Game Program (game beginning) ********************
	public static void main(String[] args) {
		Game game = new Game();
		game.frame.setResizable(false); // no resizing game window -> no graphical errors
		game.frame.setTitle(Game.title); // sets window title
		game.frame.add(game); // fills window with something
		game.frame.pack(); // sets size
		game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //terminate application when closed
		game.frame.setLocationRelativeTo(null); // sets window location to center
		game.frame.setVisible(true); // shows window
				
		game.start(); // starts game
	}
}