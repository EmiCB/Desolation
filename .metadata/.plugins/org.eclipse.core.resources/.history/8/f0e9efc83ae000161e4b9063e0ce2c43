package com.emicb.desolation;

// TIP: Ctrl + Shift + O imports
//******************** Imports Things ********************
import javax.swing.JFrame;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

//******************** Code Start ********************
public class Game extends Canvas implements Runnable
{	
//******************** Sets Variables ********************
	// default Canvas serial
	private static final long serialVersionUID = 1L;
	
	// Sets game screen resolution
	public static int width = 300;
	public static int height = width / 16 * 9; // Sets resolution to a 16 * 9 ratio
	public static int scale = 3; // How much game will be scaled up to
	
	// Sets more variables
	private Thread thread; // Thread: process within a process
	private JFrame frame; // something to do with graphics (fix comment later)
	private boolean running = false; // indicates if program is running

	// main image object, our view
	private BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	private int[] pixels = ((DataBufferInt)image.getRaster().getDataBuffer()).getData(); //array of all pixels on screen, DataBufferInt: makes things integers, getRaster: gives rectangular array of pixels you can write to
	
//******************** Constructor ********************
	public Game()
	{
		// window display
		Dimension size = new Dimension(width * scale, height * scale);
		setPreferredSize(size); // applies window size
		
		frame = new JFrame();
	}
	
//******************** Game Start ********************
	public synchronized void start() // Synchronized: ensures there are no overlaps in instructions
	{
		running = true;
		thread = new Thread(this, "Display");
		thread.start();
	}

//******************** Game Stop ********************
	public synchronized void stop ()
	{
		running = false;
		try
		{
			thread.join();
		}
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}
	}
	
//******************** Game Loop ********************
	// Run method (executed in game start)
	public void run()
	{
		System.out.println("Hello?"); // line to test run code
		while (running)
		{
			System.out.println("Running..."); // line to test run code
			
			update(); // handles logic
			render(); // displays images
		}
	}
	
	//******************** Game Logic ********************
	public void update()
	{
		
	}
	
	//******************** Game Images ********************
	public void render()
	{
		// buffer
		BufferStrategy bs = getBufferStrategy();
		if (bs == null)
		{
			createBufferStrategy(3); // stores 2 images in memory
			return;
		}
		
		Graphics g = bs.getDrawGraphics(); // links drawing graphics and the buffer
		// put all graphics below
		
		g.setColor(Color.BLACK); // sets color to black
		g.fillRect(0, 0, getWidth(), getHeight()); // makes background set color
		
		// stop
		g.dispose(); // disposes of current graphics
		bs.show(); // shows buffer strategy
	}
	
	//******************** Entry Of Game Program (game beginning) ********************
	public static void main(String[] args)
	{
		Game game = new Game();
		game.frame.setResizable(false); // no resizing game window -> no graphical errors
		game.frame.setTitle("Desolation"); // sets window title
		game.frame.add(game); // fills window with something
		game.frame.pack(); // sets size
		game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //terminate application when closed
		game.frame.setLocationRelativeTo(null); // sets window location to center
		game.frame.setVisible(true); // shows window
				
		game.start(); // starts game
	}
}
