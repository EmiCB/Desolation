package com.emicb.desolation.graphics;

//TIP: Ctrl + Shift + O imports
//******************** Imports Things ********************
import java.util.Random;

import com.emicb.desolation.level.tile.Tile;


public class Screen {
//******************** Sets Variables ********************
	public int width;
	public int height;
	public int[] pixels;
	
	// tile map size
	public final int MAP_SIZE = 64;
	public final int MAP_SIZE_MASK = MAP_SIZE - 1;
	public int[] tiles = new int[MAP_SIZE * MAP_SIZE];
	
	// offsets
	public int xOffset, yOffset;
	
	private Random random = new Random();
	
	public Screen(int width, int height) {
		this.width = width;
		this.height = height;
		// pixel array
		pixels = new int[width * height];
		
		for (int i = 0; i < MAP_SIZE * MAP_SIZE; i++) {
			tiles[i] = random.nextInt(0xffffff);
		}
	}
	
	// clears screen
	public void clear() {
		for (int i = 0; i  <pixels.length; i++) {
			pixels[i] = 0;
		}
	}
	
	// Render individual tiles; can use sprites instead of tiles, but tiles make animations easier
	// only render what you can see on the screen
	public void renderTile(int xp, int yp, Tile tile) {
		xp -= xOffset; // adjust x location by offset
		yp -= yOffset; // adjust y location by offset
		for (int y = 0; y < tile.sprite.SIZE; y++) {
			int ya = y + yp; // Set absolute position y (ya = y absolute")
			for (int x = 0; x < tile.sprite.SIZE; x++) {
				int xa = y + xp; // Set absolute position y (xa = x absolute")
				if (xa < 0 || xa >= width || ya < 0 || ya >= height) break;
				pixels[xa + ya * width] = tile.sprite.pixels[x + y * tile.sprite.SIZE];
			}
		}
	}
	
	public void setOffset(int xOffset, int yOffset) {
		this.xOffset = xOffset;
		this.yOffset = yOffset;
	}
	
}